
#Refresher before jumping in 

  # Comments use "#"
  # Int = whole number, Float = decimal
  # None = special datatype (ex: when you have 3 rows and the second one is blank)
  # Operators (PEMDAS) +,*,/,-,% (remainder), //(round down division), == (Boolean), !=
  # Var= Subject to change (age = 29)
  # Built in Functions (EX: str(),int(),type(), etc.)
  # Custom Functions: def = define, parameters = name we grant to an input of a function, return = what we want out of the code
  # str: Imutable = incapable of change, mutable = capable of change, str is imutable, in = is the item on the left in the right text
  # Lists: mutable data structure that holds collection of elements, append() = adds to list, pop() = removes last item in list
  # index positions and slicing: index of any word is -1 of len, [1:3] - never pulls the last number,left side: starts with 0 when counting, going backwards: start with -1
  # Dictionary an unordered collection of key-values pairs {}, dictionary_name{key being added: value being added, etc}, pop(key) = returns value but also removes pair from dictionary, dictionary.Values(shows values in your dictionary)
  
  
  
#Series - One Dimensional Array

    # Series object from a python list
    
    ice_cream = ["Chocolate", "Vanilla", "Strawberry", "Rum Raisin"]
    
    # Series is a class which is a blueprint for an obeject
    
    pd.Series(ice_cream)
    
    # produces list with index along with "dtype: object"
      
    lottery = [4, 8, 15, 16, 23, 42]
    pd.Series(lottery)
    
    # produces same list but difference is dtype now says int64 (64 is the bytes in your computer
    
    registrations = [True, False, False, False, True]
    pd.Series(registrations
    
        
    
    #Series object from a python dictionary
  
    sushi = {
      "Salmon": "Orange",
      "Tuna": "Red",
      "Eel": "Brown"
    }

    pd.Series(sushi)
    
    # produces dictionary with no index, but has dtype 
    
    
    # Excercise 8
    
        # Import the pandas library and assign it its "pd" alias
        
        import pandas as pd
        
        # Create a list with 4 countries - United States, France, Germany, Italy
        # Create a new Series by passing in the list of countries
        # Assign the Series to a "countries" variable

        countries = pd.Series(["United States", "France", "Germany", "Italy"])

        # Create a list with 3 colors - red, green, blue
        # Create a new Series by passing in the list of colors
        # Assign the Series to a "colors" variable
        
        colors = pd.Series(["red", "green", "blue"])

        # Given the "recipe" dictionary below,
        # create a new Series by passing in the dictionary as the data source
        # Assign the resulting Series to a "series_dict" variable
        
        recipe = {
           "Flour": True,
           "Sugar": True,
           "Salt": False
        }
        
        series_dict = pd.Series(recipe)
   
    
    
    
    
 # Methods & Attributes
 
     # Method = a command pd can perform for us EX: "hello".upper()
     
     prices = pd.Series([2.99, 4.45, 1.36])
     prices
     
     prices.sum()
     prices.product()
     prices.mean()
     
     # Attributes - detail, characteristic or fact that an object can tell about itself
     # Method is a command, attribute tells us what it is. EX: Car: Method is drive while color is attribute
     
     adjectives = pd.Series(["Smart", "Handsome", "Charming", "Brilliant", "Humble"])
     adjectives
     
     # size = tells you how many elements
     adjectives.size
     
     # is_unique = boolean that tells if everything is different
     adjectives.is_unique
     
     adjectives.values
     adjectives.index
     adjectives.dtype
     
     # Excercise 9
     
         import pandas as pd

         # The Series below stores the number of home runs
         # that a baseball player hit per game
         
         home_runs = pd.Series([3, 4, 8, 2])

         # Find the total number of home runs (i.e. the sum) and assign it
         # to the total_home_runs variable below

         total_home_runs = home_runs.sum()

         # Find the average number of home runs and assign it
         # to the average_home_runs variable below
         
         average_home_runs = home_runs.mean()
   
   
   
# Parameters & Arguements
    
    # Paramter - The name we give to an expected input
    # Arguement - The concrete value that we provide to a parameter
    # Video Game Difficulty - Easy, Medium, Hard : Parameter = Difficulty, Arguement = Easy, Medium, Hard
    
    fruits = ["Apples", "Orange", "Plum", "Grape", "Blueberry")
    weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Fridays"]
    
    # Puts a list but instead of numbers in a list, it's now the weekdays. So it will say Monday Apple in the first line
    # Position is below while Key is data and index
    pd.Series(fruits, weekdays)
    
    # These below produce the same list because the data and index are associated in pd
    pd.Series(data = fruits, index = weekdays)
    pd.Series(index = weekdays, data = fruits)
    pd.Series(fruits, index = weekdays)
    
    # Can have duplicate labels
    
    # Excercise 10 
    
        # If you see a test failure when checking your solution,
        # note that [left] refers to YOUR code while [right]
        # refers to the correct code that the computer is comparing
        # to your work

        # The code below defines a list of delicious foods
        # and some dipping sauces to dip them in
        import pandas as pd

        foods = ["French Fries", "Chicken Nuggets", "Celery", "Carrots"]
        dipping_sauces = ["BBQ", "Honey Mustard", "Ranch", "Sriracha"]

        # Create a Series and assign it to the s1 variable below. 
        # Assign the foods list as the data source
        # and the dipping_sauces list as the Series index 
        # For this solution, use positional arguments (i.e. feed in the arguments sequentially)
        
        s1 = pd.Series(foods, dipping_sauces)
        
        # Create a Series and assign it to the s2 variable below. 
        # Assign the dipping_sauces list as the data source
        # and the foods list as the Series index 
        # For this solution, use keyword arguments (i.e. provide the parameter names
        # alongside the arguments)
        s2 = pd.Series(data = dipping_sauces, index = foods)




# Import Series with the pd.read_csv Function
    
    # NOTE - Save the file in the same place or you need to create path
    #Running the below creates a dataframe which is pds = of a table
    pd.read_csv("pokemon.csv")
    
    # Moving this into a Series object
    # usecols = which column you want
    # squeeze = moves it from a dataframe into a series obj
    pokemon = pd.read_csv("pokemon.csv", usecols = ["Pokemon"]).squeeze("columns")
    pokemon
    
    # Google Stock Price
    google = pd.read_csv("google_stock_price.csv", usecols = ["Stock Price"]).squeeze("columns")
    google
    
    
    # Excercise 11
    
    
        # If you see a test failure when checking your solution,
        # note that [left] refers to YOUR code while [right]
        # refers to the correct code that the computer is comparing
        # to your work

        import pandas as pd

        # We have a foods.csv CSV file with 3 columns: Item Number, Menu Item, Price
        # You can explore the data by clicking into the foods.csv file on the left
        # Import the CSV file into a pandas Series object
        # The Series should have the standard pandas numeric index
        # The Series values should be the string values from the "Menu Item" column
        # Assign the Series object to a "foods" variable
        
        foods = pd.read_csv("foods.csv", usecols = ["Menu Item"]).squeeze("columns")
 
 
 
 # Head and Tail Methods

    # Both return a specified number of rows from a series
    
    google = pd.read_csv("google_stock_price.csv", usecols = ["Stock Price"]).squeeze("columns")
    pokemon = pd.read_csv("pokemon.csv", usecols = ["Pokemon"]).squeeze("columns")
    
    # Heads returns first 5 rows
    pokemon.head()
    pokemon.head(5)
    pokemon.head(n = 5)

    # Tail returns first 5 rows
    pokemon.tail()
    pokemon.tail(5)
    pokemon.tail(n = 5)
    
    # Excercise 12
    
    
        # If you see a test failure when checking your solution,
        # note that [left] refers to YOUR code while [right]
        # refers to the correct code that the computer is comparing
        # to your work

        import pandas as pd

        # We have a roller_coasters.csv CSV file with 4 columns: Name, Park, Country, and Height.
        # You can explore the data by clicking into the CSV file on the left
        # Import the CSV file into a pandas Series object
        # The Series should have the standard pandas numeric index
        # The Series values should be the string values from the "Name" column
        # Assign the Series object to a "coasters" variable

        coasters = pd.read_csv("roller_coasters.csv", usecols = ["Name"]).squeeze("columns")

        # I only want to ride the top 3 roller coasters on the list.
        # Starting with the "coasters" Series, extract the first 3 rows in a new Series.
        # Assign the new Series to a "top_three" variable.

        top_three = coasters.head(3)

        # I'm now curious about some of the last entries on the coaster list.
        # Starting with the "coasters" Series, extract the last 4 rows in a new Series.
        # Assign the new Series to a "bottom_four" variable.
    
        bottom_four = coasters.tail(4)
    
    
    
# Passing Series to Python's Built-In Functions & sort_values method

    google = pd.read_csv("google_stock_price.csv", usecols = ["Stock Price"]).squeeze("columns")
    pokemon = pd.read_csv("pokemon.csv", usecols = ["Pokemon"]).squeeze("columns")
    
    # dir = lets you know list of attributes available with that object
    dir(pokemon)
    
    # sorted = sorts the list
    sorted(pokemon)
    
    #dict = key and values of the list
    dict(pokemon)
    
    # Max and Min = Max returns last item in alphabet and min does first
    max(pokemon)
    min(pokemon)
    
    #sort_values - default ascending alphabet, lowest number
    pokemon.sort_values()
    
    # Excercise 13
    
    
        # Below, we have a list of delicious tortilla chip flavors
        flavors = ["Spicy Sweet Chili", "Cool Ranch", "Nacho Cheese", "Salsa Verde"]

        # Create a new Series object, passing in the flavors list defined above
        # Assign it to a 'doritos' variable. The resulting Series should look like this:
        #
        #
        #   0    Spicy Sweet Chili
        #   1           Cool Ranch
        #   2         Nacho Cheese
        #   3          Salsa Verde
        #   dtype: object

        doritos = pd.Series(flavors)


        # Below, sort the doritos Series in descending order.
        # Assign the sorted a Series to a 'sorted_doritos' variable.
        # The sorted Series should like this:
        #
        #   0    Spicy Sweet Chili
        #   3          Salsa Verde
        #   2         Nacho Cheese
        #   1           Cool Ranch
        #   dtype: object

        sorted_doritos = doritos.sort_values(ascending = False)
        
     
     
# The sort_index Method
     
    # Same as before but with an index
    pd.read_csv("pokemon", index_col = "Pokemon").squeeze()
    pokemon.sort_index()
 
        
    # Excercise 14
    
    
        # If you see a test failure when checking your solution,
        # note that [left] refers to YOUR code while [right]
        # refers to the correct code that the computer is comparing
        # to your work
         
        import pandas as pd

        # Below, we have a list of delicious drink flavors
        # We create a sorted Series of strings and assign it to a 'gatorade' variable
         
        flavors = ["Red", "Blue", "Green", "Orange"]
        gatorade = pd.Series(flavors).sort_values()

        # I'd like to return the Series to its original order        
        # (sorted by the numeric index in ascending order). 
        # Sort the gatorade Series by index
        # Assign the result to an 'original' variable.

        original = gatorade.sort_index(ascending = True)
        
        
        
    
 # Check for inclusion with Python's Keywords
  
     
     pokemon = pd.read_csv("pokemon", index_col = ["Pokemon"]).squeeze()
     pokemon.head()
     
     # pds doesn't look in index
     "Pikachu" in pokemon.values
     # Returns True
     
     # Excercise 15
    
    
         # If you see a test failure when checking your solution,
         # note that [left] refers to YOUR code while [right]
         # refers to the correct code that the computer is comparing
         # to your work
         
         import pandas as pd

         # This challenge includes a coffee.csv with 2 columns: 
         # Coffee and Calories. Import the CSV. Assign the Coffee
         # column to be the index and the Calories column to be the
         # Series' values. Assign the Series to a 'coffee' variable.


         # Check whether the coffee 'Flat White' is present in the data.
         # Assign the result to a `flat_white` variable


         # Check whether the coffee 'Cortado' is present in the data.
         # Assign the result to a `cortado` variable


         # Check whether the coffee 'Blackberry Mocha' is present in the data.
         # Assign the result to a `blackberry_mocha` variable


         # Check whether the value 221 is present in the data.
         # Assign the result to a 'high_calorie' variable.


         # Check whether the value 400 is present in the data.
         # Assign the result to a 'super_high_calorie' variable.

