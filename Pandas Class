
#Refresher before jumping in 

  # Comments use "#"
  # Int = whole number, Float = decimal
  # None = special datatype (ex: when you have 3 rows and the second one is blank)
  # Operators (PEMDAS) +,*,/,-,% (remainder), //(round down division), == (Boolean), !=
  # Var= Subject to change (age = 29)
  # Built in Functions (EX: str(),int(),type(), etc.)
  # Custom Functions: def = define, parameters = name we grant to an input of a function, return = what we want out of the code
  # str: Imutable = incapable of change, mutable = capable of change, str is imutable, in = is the item on the left in the right text
  # Lists: mutable data structure that holds collection of elements, append() = adds to list, pop() = removes last item in list
  # index positions and slicing: index of any word is -1 of len, [1:3] - never pulls the last number,left side: starts with 0 when counting, going backwards: start with -1
  # Dictionary an unordered collection of key-values pairs {}, dictionary_name{key being added: value being added, etc}, pop(key) = returns value but also removes pair from dictionary, dictionary.Values(shows values in your dictionary)
  
  
  
#Series - One Dimensional Array

    # Series object from a python list
    
    ice_cream = ["Chocolate", "Vanilla", "Strawberry", "Rum Raisin"]
    
    # Series is a class which is a blueprint for an obeject
    
    pd.Series(ice_cream)
    
    # produces list with index along with "dtype: object"
      
    lottery = [4, 8, 15, 16, 23, 42]
    pd.Series(lottery)
    
    # produces same list but difference is dtype now says int64 (64 is the bytes in your computer
    
    registrations = [True, False, False, False, True]
    pd.Series(registrations
    
        
    
    #Series object from a python dictionary
  
    sushi = {
      "Salmon": "Orange",
      "Tuna": "Red",
      "Eel": "Brown"
    }

    pd.Series(sushi)
    
    # produces dictionary with no index, but has dtype 
    
    
    # Excercise 8
    
        # Import the pandas library and assign it its "pd" alias
        
        import pandas as pd
        
        # Create a list with 4 countries - United States, France, Germany, Italy
        # Create a new Series by passing in the list of countries
        # Assign the Series to a "countries" variable

        countries = pd.Series(["United States", "France", "Germany", "Italy"])

        # Create a list with 3 colors - red, green, blue
        # Create a new Series by passing in the list of colors
        # Assign the Series to a "colors" variable
        
        colors = pd.Series(["red", "green", "blue"])

        # Given the "recipe" dictionary below,
        # create a new Series by passing in the dictionary as the data source
        # Assign the resulting Series to a "series_dict" variable
        
        recipe = {
           "Flour": True,
           "Sugar": True,
           "Salt": False
        }
        
        series_dict = pd.Series(recipe)
   
    
    
    
    
 # Methods & Attributes
 
     # Method = a command pd can perform for us EX: "hello".upper()
     
     prices = pd.Series([2.99, 4.45, 1.36])
     prices
     
     prices.sum()
     prices.product()
     prices.mean()
     
     # Attributes - detail, characteristic or fact that an object can tell about itself
     # Method is a command, attribute tells us what it is. EX: Car: Method is drive while color is attribute
     
     adjectives = pd.Series(["Smart", "Handsome", "Charming", "Brilliant", "Humble"])
     adjectives
     
     # size = tells you how many elements
     adjectives.size
     
     # is_unique = boolean that tells if everything is different
     adjectives.is_unique
     
     adjectives.values
     adjectives.index
     adjectives.dtype
     
     # Excercise 9
     
         import pandas as pd

         # The Series below stores the number of home runs
         # that a baseball player hit per game
         
         home_runs = pd.Series([3, 4, 8, 2])

         # Find the total number of home runs (i.e. the sum) and assign it
         # to the total_home_runs variable below

         total_home_runs = home_runs.sum()

         # Find the average number of home runs and assign it
         # to the average_home_runs variable below
         
         average_home_runs = home_runs.mean()
    
     
